// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const contractDefinition = artifacts.require('Verifier');
const proofJson = require("../../zokrates/code/proof.json");

contract('Verifier', accounts => {
    before(async() => {
        verifierContract = await contractDefinition.new({from: accounts[0]});
    });

    // Test verification with correct proof
    it('Test verification with correct proof', async() => {
        // - use the contents from proof.json generated from zokrates steps
        let result = await verifierContract.verifyTx.call(proofJson.proof.A, proofJson.proof.A_p, proofJson.proof.B, proofJson.proof.B_p, proofJson.proof.C, proofJson.proof.C_p, proofJson.proof.H, proofJson.proof.K, proofJson.input);
        assert.equal(result, true, "Proof should be correct");
    });
    
    // Test verification with incorrect proof
    it('Test verification with incorrect proof', async() => {
        // - use the contents from proof.json generated from zokrates steps
        let result = await verifierContract.verifyTx.call(proofJson.proof.A, proofJson.proof.A_p, proofJson.proof.B, proofJson.proof.B_p, proofJson.proof.A, proofJson.proof.A_p, proofJson.proof.H, proofJson.proof.K, proofJson.input);
        assert.equal(result, false, "Proof should be incorrect");
    });
});

